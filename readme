UEFI Boot - is a small and simple project aimed to organize the loading of linux kernel via UEFI firmware (without any bootloader).

The synchronization of UEFI boot options with installed kernel versions is triggered via /etc/kernel/postinst.d and /etc/kernel/postrm.d kernel triggers.

Files:
readme - this file
license - GPL license
setup.sh - setup and initialization script
/usr/bin/uefuboot-update - utility to update UEFI boot options according to installed kernel versions
/etc/uefiboot.conf - configuration file of uefuboot-update utility (see comments inside).
keys/ - set of known keys for SecureBoot support.

Notes:

Setup script is designed to work on Ubuntu system that is installed with UEFI support (grub-efi is in use instead of grub-pc). It's better to review and verify that commands in this file corresponds to your configuration before you run it.

/etc/uefiboot.conf - is optional config file. It sets root file system device reference, subvolume (btrfs), kernel suffix and boot options. When the file is missed or values are not set then:
- root device is taken from /etc/fstab
- subvolume information (for btrfs) is taken from /etc/fstab
- boot options are set as "ro quiet"
- kernel suffix is empty ("")
- efi volume as $(blkid -lt TYPE="vfat" -o device)
- distribution name (used as 1-st part* of uefi-boot label) as $(lsb_release -d -s)
- distribution identity (used as 2-nd part* of uefi-boot label) as $(lsb_release -d -s | cut -d' ' -f2,3)
*3-rd part of uefi-boot label is the kernel version.

Important:

Be very careful with parameters ROOT an OPTIONS in /etc/uefiboot.conf! If you make a mistake in these parameters values and update UEFI boot options the system startup will fall in to initramfs shell. There will be three options to recover normal boot:
1. From initramfs shell: try to mount root device into /root catalog and exit from initramfs shell.
2. Using UEFI Shell (if it is available on your system): you can manualy start the kernel and specify correct parameters for it.
3. Using LiveUSB/CD: boot in UEFI mode from LiveUSB/CD and use efibootmgr utility to define correct UEFI boot option or you can mount original root and run /usr/bin/uefuboot-update from it.
